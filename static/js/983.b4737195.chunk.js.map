{"version":3,"file":"static/js/983.b4737195.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","pages/Contacts/Contacts.styled.js","components/Section/Section.styled.js","components/Section/Section.jsx","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Notification/Notification.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const getContacts = state => state.contacts.items;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n\nexport const getFilter = state => state.filter;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.main`\n  max-width: 1200px;\n  margin: 0 auto;\n`;\n\nexport const Wrapper = styled.div`\n  height: 100vh;\n  width: 90%;\n  margin: 0 auto;\n  font-size: 24px;\n  color: #000;\n`;\n","import styled from '@emotion/styled';\n\nexport const SectionContainer = styled.section`\n  :not(:last-of-type) {\n    margin-bottom: 30px;\n  }\n`;\n\nexport const SectionTitle = styled.h2`\n  margin-bottom: 10px;\n`;\n","import PropTypes from 'prop-types';\nimport { SectionContainer, SectionTitle } from './Section.styled';\n\nexport const Section = ({ title, children }) => {\n  return (\n    <SectionContainer>\n      <SectionTitle>{title}</SectionTitle>\n      {children}\n    </SectionContainer>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.any.isRequired,\n};\n","import styled from '@emotion/styled';\nimport { Form, Field } from 'formik';\n\nexport const ContactFormContainer = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  width: 500px;\n  padding: 20px;\n\n  border-radius: 10px;\n  border: 1px solid #000;\n`;\n\nexport const FormField = styled.label``;\n\nexport const Input = styled(Field)`\n  width: 100%;\n  padding: 10px;\n`;\n\nexport const Button = styled.button`\n  padding: 10px;\n  border: none;\n  border-radius: 5px;\n\n  background-color: #07e;\n  color: #fff;\n  cursor: pointer;\n\n  transition: background-color 250ms ease-in-out;\n\n  :hover {\n    background-color: #04e;\n  }\n`;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { Formik } from 'formik';\nimport {\n  ContactFormContainer,\n  FormField,\n  Input,\n  Button,\n} from './ContactForm.styled';\nimport { toast } from 'react-toastify';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const isNotExist = contacts.every(\n      contact => contact.name.toLowerCase() !== values.name.toLowerCase()\n    );\n\n    if (isNotExist) {\n      dispatch(addContact(values));\n      resetForm();\n      return;\n    }\n\n    toast.error('Contact is exist');\n  };\n\n  return (\n    <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n      <ContactFormContainer autoComplete=\"off\">\n        <FormField>\n          <p>Name</p>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </FormField>\n        <FormField>\n          <p>Phone</p>\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </FormField>\n        <Button type=\"submit\">Add contact</Button>\n      </ContactFormContainer>\n    </Formik>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const FilterInput = styled.input`\n  margin-bottom: 30px;\n`;\n","import { FilterInput } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from 'redux/contacts/selectors';\nimport { changeFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handleChange = e => dispatch(changeFilter(e.target.value));\n\n  return (\n    <>\n      <p>Find contacts by name</p>\n      <FilterInput\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={handleChange}\n      />\n    </>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ContactsTable = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n\n  color: #757575;\n`;\n\nexport const Row = styled.tr`\n  :hover {\n    background-color: rgba(0, 0, 0, 0.075);\n  }\n`;\n\nexport const Cell = styled.td`\n  padding: 10px;\n  border: 1px solid #f4f4f4;\n\n  :last-of-type {\n    text-align: center;\n  }\n`;\n\nexport const HeaderRow = styled.tr`\n  border: 1px solid #f4f4f4;\n  border-bottom-width: 2px;\n  font-weight: 500;\n  color: #616161;\n`;\n\nexport const HeaderCell = styled.th`\n  padding: 10px;\n  text-align: left;\n\n  :not(:last-of-type) {\n    border-right: 1px solid #f4f4f4;\n  }\n\n  :last-of-type {\n    text-align: center;\n  }\n`;\n\nexport const RemoveButton = styled.button`\n  padding: 10px;\n  min-width: 75px;\n  border: none;\n  border-radius: 5px;\n\n  background-color: #e77;\n  color: #fff;\n  cursor: pointer;\n\n  transition: background-color 250ms ease-in-out;\n\n  :hover {\n    background-color: #e33;\n  }\n`;\n","import { useSelector } from 'react-redux';\nimport { getFilter } from 'redux/contacts/selectors';\nimport { removeContact } from 'redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\nimport {\n  ContactsTable,\n  HeaderRow,\n  HeaderCell,\n  Row,\n  Cell,\n  RemoveButton,\n} from './ContactList.styled';\n\nexport const ContactList = ({ contacts }) => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <ContactsTable>\n      <thead>\n        <HeaderRow>\n          <HeaderCell>Name</HeaderCell>\n          <HeaderCell>Phone Number</HeaderCell>\n          <HeaderCell>Action</HeaderCell>\n        </HeaderRow>\n      </thead>\n      <tbody>\n        {filteredContacts.map(({ id, name, number }) => (\n          <Row key={id}>\n            <Cell>{name}</Cell>\n            <Cell>{number}</Cell>\n            <Cell>\n              <RemoveButton\n                type=\"button\"\n                onClick={() => dispatch(removeContact(id))}\n              >\n                Delete\n              </RemoveButton>\n            </Cell>\n          </Row>\n        ))}\n      </tbody>\n    </ContactsTable>\n  );\n};\n","import PropTypes from 'prop-types';\n\nexport const Notification = ({ message }) => <p>{message}</p>;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Puff } from 'react-loader-spinner';\nimport { getContacts, getError, getIsLoading } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nimport { Wrapper } from './Contacts.styled';\n\nimport { Section } from 'components/Section/Section';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Notification } from 'components/Notification/Notification';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n  const error = useSelector(getError);\n  const isLoading = useSelector(getIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const notification = error || 'There is no contact';\n\n  return (\n    <Wrapper>\n      <Section title=\"Phonebook\">\n        <ContactForm />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter />\n        {isLoading && <Puff />}\n        {contacts.length > 0 && <ContactList contacts={contacts} />}\n        {contacts.length === 0 && !isLoading && (\n          <Notification message={notification} />\n        )}\n      </Section>\n    </Wrapper>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["getContacts","state","contacts","items","getIsLoading","isLoading","getError","error","getFilter","filter","Wrapper","styled","SectionContainer","SectionTitle","Section","title","children","ContactFormContainer","Form","FormField","Input","Field","Button","initialValues","name","number","ContactForm","dispatch","useDispatch","useSelector","onSubmit","values","resetForm","every","contact","toLowerCase","addContact","toast","autoComplete","type","pattern","required","FilterInput","Filter","value","onChange","e","changeFilter","target","ContactsTable","Row","Cell","HeaderRow","HeaderCell","RemoveButton","ContactList","filteredContacts","includes","map","id","onClick","removeContact","Notification","message","useEffect","fetchContacts","notification","length"],"sourceRoot":""}